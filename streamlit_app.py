import os
import json
import re
import requests
import pandas as pd
import streamlit as st
from io import StringIO

# ===============================
# Z√ÅKLAD
# ===============================
st.set_page_config(page_title="Cenov√Ω asistent", layout="wide")
st.title("üß† Cenov√Ω asistent ‚Äì ƒçist√Ω start")

# Session
if "LOG" not in st.session_state:
    st.session_state.LOG = []
if "CENIKY" not in st.session_state:
    st.session_state.CENIKY = {}   # dict[str(lower) -> DataFrame]
if "PRODUKTY" not in st.session_state:
    st.session_state.PRODUKTY = [] # hezk√© n√°zvy pro prompt

def log(msg: str):
    st.session_state.LOG.append(str(msg))

def show_log():
    st.text_area("ü™µ Live log", value="\n".join(st.session_state.LOG), height=320)

# ===============================
# POMOCN√â FUNKCE
# ===============================
SEZNAM_PATH = os.path.join(os.path.dirname(__file__), "seznam_ceniku.txt")

def cwd_and_existence_probe():
    log(f"üìÇ CWD: {os.getcwd()}")
    log(f"üîé exists('{SEZNAM_PATH}')? {os.path.exists(SEZNAM_PATH)}")

def read_seznam_ceniku():
    """
    Vr√°t√≠ list (name, url) z `seznam_ceniku.txt`.
    Form√°t ≈ô√°dk≈Ø: 'N√°zev = "URL"'
    Ignoruje pr√°zdn√© ≈ô√°dky a koment√°≈ôe zaƒç√≠naj√≠c√≠ #.
    """
    pairs = []
    try:
        with open(SEZNAM_PATH, "r", encoding="utf-8") as f:
            lines = f.read().splitlines()
        log(f"üìÑ Naƒçten {SEZNAM_PATH} ({len(lines)} ≈ô√°dk≈Ø)")

        for i, line in enumerate(lines, start=1):
            raw = line.strip()
            if not raw or raw.startswith("#"):
                continue

            # akceptuj form√°t: N√°zev = "URL"
            m = re.match(r'^(.+?)\s*=\s*["\'](.+?)["\']$', raw)
            if not m:
                log(f"‚ö†Ô∏è ≈ò√°dek {i} p≈ôeskoƒçen (neoƒçek√°van√Ω form√°t): {raw}")
                continue

            name, url = m.groups()
            name = name.strip()
            url = url.strip()

            if not name or not url:
                log(f"‚ö†Ô∏è ≈ò√°dek {i} m√° pr√°zdn√Ω n√°zev nebo URL: {raw}")
                continue

            pairs.append((name, url))

        log(f"‚úÖ Zparsov√°no {len(pairs)} polo≈æek ze seznamu")
    except Exception as e:
        log(f"‚ùå Chyba p≈ôi ƒçten√≠ '{SEZNAM_PATH}': {e}")
        st.error(f"Soubor '{SEZNAM_PATH}' chyb√≠ nebo nejde ƒç√≠st.")
    return pairs

def fetch_csv(url: str) -> pd.DataFrame | None:
    try:
        log(f"üåê GET {url}")
        r = requests.get(url, timeout=30)
        log(f"üîÅ HTTP {r.status_code}, {len(r.text)} znak≈Ø")
        if r.status_code != 200:
            return None
        df = pd.read_csv(StringIO(r.text))
        log(f"‚úÖ CSV naƒçteno: shape={df.shape}")
        log("üëÄ N√°hled CSV (3 ≈ô√°dky):\n" + df.head(3).to_string(index=False))
        return df
    except Exception as e:
        log(f"‚ùå Chyba p≈ôi stahov√°n√≠ CSV: {e}")
        return None

def normalize_numeric_token(x) -> int | None:
    if pd.isna(x):
        return None
    s = str(x).strip()
    s = s.replace("\xa0", "").replace(" ", "")
    s = re.sub(r"[Kk][ƒåc]|\s*mm|\s*MM", "", s)
    s = s.replace(".", "")
    s = s.replace(",", ".")
    m = re.search(r"-?\d+(\.\d+)?", s)
    if not m:
        return None
    try:
        val = float(m.group(0))
        return int(round(val))
    except Exception:
        return None

def coerce_matrix(df: pd.DataFrame) -> pd.DataFrame | None:
    if df is None or df.empty:
        log("‚ö†Ô∏è Pr√°zdn√Ω DF, nelze p≈ôev√©st na matici.")
        return None

    first_col = df.columns[0]
    idx_try = [normalize_numeric_token(v) for v in df[first_col]]
    numerics_ratio = sum(v is not None for v in idx_try) / max(1, len(idx_try))

    if numerics_ratio > 0.6:
        df2 = df.copy()
        df2.index = idx_try
        df2 = df2.drop(columns=[first_col])
    else:
        df2 = df.copy()

    new_cols = [normalize_numeric_token(c) for c in df2.columns]
    if sum(c is not None for c in new_cols) < len(new_cols) * 0.6:
        log("‚ÜîÔ∏è Sloupce nevypadaj√≠ numericky, zkou≈°√≠m transponovat‚Ä¶")
        df2 = df2.T
        new_cols = [normalize_numeric_token(c) for c in df2.columns]
        df2.index = [normalize_numeric_token(i) for i in df2.index]

    df2.columns = new_cols
    df2.index = [normalize_numeric_token(i) for i in df2.index]
    df2 = df2.loc[[i for i in df2.index if i is not None],
                  [c for c in df2.columns if c is not None]]

    for c in df2.columns:
        df2[c] = pd.to_numeric(df2[c], errors="coerce")

    log(f"üß© Matice p≈ôipravena: shape={df2.shape} (indexy a sloupce jsou int)")
    return df2

def nearest_ge(values: list[int], want: int) -> int:
    vals = sorted(values)
    for v in vals:
        if v >= want:
            return v
    return vals[-1]

def find_price(df_mat: pd.DataFrame, width: int, height: int):
    if df_mat is None or df_mat.empty:
        return None, None, None
    cols = sorted([int(c) for c in df_mat.columns])
    rows = sorted([int(r) for r in df_mat.index])
    use_w = nearest_ge(cols, width)
    use_h = nearest_ge(rows, height)
    price = df_mat.loc[use_h, use_w]
    return use_w, use_h, price

# ===============================
# NAƒåTEN√ç CEN√çK≈Æ
# ===============================
def load_all_ceniky():
    st.session_state.LOG.clear()
    cwd_and_existence_probe()
    pairs = read_seznam_ceniku()
    st.session_state.CENIKY.clear()
    st.session_state.PRODUKTY.clear()

    for name, url in pairs:
        raw = fetch_csv(url)
        if raw is None:
            log(f"‚ùå {name}: CSV nedostupn√©.")
            continue
        mat = coerce_matrix(raw)
        if mat is None or mat.empty:
            log(f"‚ö†Ô∏è {name}: po p≈ôevodu na matici je DF pr√°zdn√Ω.")
            continue
        st.session_state.CENIKY[name.lower()] = mat
        st.session_state.PRODUKTY.append(name)
        try:
            cols = sorted([int(c) for c in mat.columns])
            rows = sorted([int(r) for r in mat.index])
            log(f"üìè {name}: ≈°√≠≈ôky {cols[0]}‚Äì{cols[-1]} | v√Ω≈°ky {rows[0]}‚Äì{rows[-1]} (krok≈Ø: {len(cols)}√ó{len(rows)})")
        except Exception:
            pass

colA, colB = st.columns([1,1])
with colA:
    if st.button("‚ôªÔ∏è Znovu naƒç√≠st cen√≠ky"):
        load_all_ceniky()
with colB:
    st.write("")

if not st.session_state.CENIKY:
    load_all_ceniky()

# ===============================
# N√ÅHLED V≈†ECH TABULEK
# ===============================
with st.expander("üìÇ Zobrazit v≈°echny naƒçten√© tabulky"):
    if not st.session_state.CENIKY:
        st.info("Zat√≠m nic nenalezeno ‚Äì zkontroluj 'seznam_ceniku.txt' a klikni na 'Znovu naƒç√≠st cen√≠ky'.")
    else:
        for name in st.session_state.PRODUKTY:
            df = st.session_state.CENIKY.get(name.lower())
            st.markdown(f"#### {name}")
            if df is not None:
                st.dataframe(df, use_container_width=True)
            else:
                st.warning("Cen√≠k nen√≠ naƒçten.")

# ===============================
# V√ùPOƒåET CEN ‚Äì TEXTOV√ù VSTUP (GPT)
# ===============================
st.markdown("---")
st.subheader("üìù V√Ωpoƒçet cen podle textov√©ho vstupu")

with st.form("calc_form"):
    user_text = st.text_area("Zadej popt√°vku (nap≈ô. `ALUX Bioclimatic 5990x4500`):", height=100)
    submitted = st.form_submit_button("üì§ ODESLAT")

if submitted and user_text.strip():
    log("\n---")
    log(f"üì• U≈æivatelsk√Ω vstup:\n{user_text}")

    product_list = ", ".join(st.session_state.PRODUKTY) if st.session_state.PRODUKTY else "screen"
    system_prompt = (
        "Tv≈Øj √∫kol: z n√°sleduj√≠c√≠ho textu vyt√°hni V≈†ECHNY polo≈æky s n√°zvem produktu, ≈°√≠≈ôkou (mm) a v√Ω≈°kou (mm). "
        f"N√°zev produktu vyb√≠rej co nejp≈ôesnƒõji z tohoto seznamu: {product_list}. "
        "Fr√°ze jako 'screen', 'screenov√° roleta' v≈ædy p≈ôi≈ôaƒè k produktu 'screen'. "
        "Rozmƒõry jako 3500-250 nejprve spoƒç√≠tej a v√Ωstup dej jako ƒçist√° ƒç√≠sla v mm. "
        "Vra≈• POUZE validn√≠ JSON list, nap≈ô. "
        "[{\"produkt\":\"ALUX Bioclimatic\",\"≈°√≠≈ôka\":5990,\"hloubka_v√Ω≈°ka\":4500}]"
    )
    try:
        import openai
        client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
        resp = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role":"system","content": system_prompt},
                {"role":"user","content": user_text}
            ],
            max_tokens=600
        )
        raw = resp.choices[0].message.content.strip()
        log("üì® GPT odpovƒõƒè (RAW):\n" + raw)
        try:
            items = json.loads(raw)
        except Exception as e:
            log(f"‚ùå JSON decode chyba: {e}")
            items = []
    except Exception as e:
        log(f"‚ùå GPT chyba: {e}")
        items = []

    results = []
    for it in items:
        try:
            produkt = str(it["produkt"]).strip()
            w = int(float(it["≈°√≠≈ôka"]))
            h = int(float(it["hloubka_v√Ω≈°ka"]))
        except Exception as e:
            log(f"‚ùå Polo≈æka m√° ≈°patn√Ω form√°t: {it} ({e})")
            continue

        df_mat = st.session_state.CENIKY.get(produkt.lower())
        if df_mat is None:
            log(f"‚ùå Cen√≠k nenalezen: {produkt}")
            continue

        use_w, use_h, price = find_price(df_mat, w, h)
        log(f"üìê Po≈æadov√°no {w}√ó{h}, pou≈æito {use_w}√ó{use_h}")
        log(f"üì§ df.loc[{use_h}, {use_w}] = {price}")
        if pd.isna(price):
            st.warning(f"{produkt}: {w}√ó{h} ‚Üí {use_w}√ó{use_h}: bu≈àka je pr√°zdn√° (NaN).")
            continue

        results.append({
            "Produkt": produkt,
            "Rozmƒõr (po≈æadovan√Ω)": f"{w}√ó{h}",
            "Rozmƒõr (pou≈æit√Ω)": f"{use_w}√ó{use_h}",
            "Cena bez DPH": float(price)
        })

    if results:
        st.success(f"Hotovo ‚Äì nalezeno {len(results)} polo≈æek.")
        st.dataframe(pd.DataFrame(results), use_container_width=True)
    else:
        st.info("Nebyla nalezena ≈æ√°dn√° oceniteln√° polo≈æka (zkontroluj vstup nebo cen√≠k).")

# ===============================
# DEBUG PANEL
# ===============================
st.markdown("---")
st.subheader("üõ†Ô∏è Debug panel")
show_log()
